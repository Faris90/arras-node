exports.encode=(()=>{var a=new Uint8Array(1),b=new Uint16Array(1),c=new Uint8Array(b.buffer),d=new Uint32Array(1),e=new Uint8Array(d.buffer),f=new Float32Array(1),g=new Uint8Array(f.buffer),h=(k,l)=>{let m='';switch(k){case'RawUint8':return a[0]=l,String.fromCharCode(a[0]);case'RawUint16':return b[0]=l,String.fromCharCode(c[0],c[1]);case'Uint8':return a[0]=l,'0'+String.fromCharCode(a[0]);case'Uint16':return b[0]=l,'1'+String.fromCharCode(c[0],c[1]);case'Uint32':return d[0]=l,'2'+String.fromCharCode(e[0],e[1],e[2],e[3]);case'Sint8':return a[0]=-1-l,'3'+String.fromCharCode(a[0]);case'Sint16':return b[0]=-1-l,'4'+String.fromCharCode(c[0],c[1]);case'Sint32':return d[0]=-1-l,'5'+String.fromCharCode(e[0],e[1],e[2],e[3]);case'Float32':return f[0]=l,'6'+String.fromCharCode(g[0],g[1],g[2],g[3]);case'String8':return'7'+h('RawUint16',l.length)+l;case'String16':for(let n=0,o=l.length;n<o;n++)m+=h('RawUint16',l.charCodeAt(n));return'8'+h('RawUint16',m.length)+m;default:throw new Error('Unknown encoding type!');}},j=k=>{if('string'==typeof k){for(var l=0;l<k.length;l++)if(255<k.charCodeAt(l))return'String16';return'String8'}if('boolean'==typeof k)return'Uint8';if('number'!=typeof k)throw console.log(k),new Error('Unencodable data type!');if(k!=Math.round(k))return'Float32';if(0>k){if(-256<=k)return'Sint8';if(-65535<=k)return'Sint16';if(-4294967295<=k)return'Sint32'}else{if(256>k)return'Uint8';if(65535>k)return'Uint16';if(4294967295>k)return'Uint32'}return'Float32'};return(k,l=!1)=>{let m=k.splice(0,1)[0];if('string'!=typeof m)throw new Error('No identification code!');k.forEach(q=>{m+=h(j(q),q)});let n=m.length,o=new ArrayBuffer(n),p=new Uint8Array(o);for(let q=0;q<n;q++)p[q]=m.charCodeAt(q);return l&&(console.log('OUTPUT: '+p),console.log('RAW OUTPUT: '+m),console.log('SIZE: '+n)),o}})(),exports.decode=(()=>{var a=new Uint16Array(1),b=new Uint8Array(a.buffer),c=new Uint32Array(1),d=new Uint8Array(c.buffer),e=new Float32Array(1),f=new Uint8Array(e.buffer),g=(h,j,k)=>{switch(j){case'Uint8':return h.charCodeAt(k++);case'Uint16':for(let l=0;2>l;l++)b[l]=h.charCodeAt(k++);return a[0];case'Uint32':for(let l=0;4>l;l++)d[l]=h.charCodeAt(k++);return c[0];case'Sint8':return-1-h.charCodeAt(k++);case'Sint16':for(let l=0;2>l;l++)b[l]=h.charCodeAt(k++);return-1-a[0];case'Sint32':for(let l=0;4>l;l++)d[l]=h.charCodeAt(k++);return-1-c[0];case'Float32':for(let l=0;4>l;l++)f[l]=h.charCodeAt(k++);return e[0];default:throw new Error('Unknown decoding type!');}};return h=>{try{let j=new Uint8Array(h),k='';for(let n=0,o=j.length;n<o;n++)k+=String.fromCharCode(j[n]);let l=1,m=[k.charAt(0)];for(;l<k.length;)switch(k[l++]){case'0':m.push(g(k,'Uint8',l)),l++;break;case'1':m.push(g(k,'Uint16',l)),l+=2;break;case'2':m.push(g(k,'Uint32',l)),l+=4;break;case'3':m.push(g(k,'Sint8',l)),l++;break;case'4':m.push(g(k,'Sint16',l)),l+=2;break;case'5':m.push(g(k,'Sint32',l)),l+=4;break;case'6':m.push(g(k,'Float32',l)),l+=4;break;case'7':{let n=g(k,'Uint16',l);l+=2,m.push(k.slice(l,l+n)),l+=n}break;case'8':{let n=g(k,'Uint16',l);l+=2;let o=k.slice(l,l+n),p=new Uint16Array(n/2);for(let q=0;q<n;q+=2)p[q/2]=g(o,'Uint16',q);m.push(String.fromCharCode.apply(null,p)),l+=n}break;default:throw l=k.length,new Error('Unknown decoding command, decoding exited!');}return m}catch(j){return console.log(j),-1}}})();